@model CampaignManager.Persistence.Models.CreateInvitationViewModel

@{
    ViewData["Title"] = "Send Invitation";

    Func<Role, String> RoleConverter = role =>
    {
        switch (role)
        {
            case Role.GameMaster: return "Gamemaster";
            case Role.Player: return "Player";
            case Role.PlayerAndGameMaster: return "Player and Gamemaster";
            default: return "?";
        }
    };
}


<h1>Send Invitation</h1>

<div class="details-view">
<h4>Invitation</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Role" class="control-label">Role</label>
                <select asp-for="Role" class="form-control">
                    @foreach (var role in Model.Roles)
                    {
                        <option value="@role.Value">@RoleConverter((Role)Enum.Parse(typeof(Role), role.Value))</option>
                    }
                </select>
            </div>
            <input type="hidden" asp-for="CampaignId" />
            <div class="form-group">
                <input type="submit" value="Send" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>
</div>

<p> </p>

<div>
    <a asp-action="Details" asp-route-id="@Model.CampaignId">Back to Campaign</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
